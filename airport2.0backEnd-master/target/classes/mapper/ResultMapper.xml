<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bjtu.recovery.mapper.ResultMapper">

    <resultMap id="BaseResultMap" type="com.bjtu.recovery.entity.Result">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="filename" jdbcType="VARCHAR" property="filename"/>
        <result column="model" jdbcType="VARCHAR" property="model"/>
        <result column="flightId" jdbcType="INTEGER" property="flightId"/>
        <result column="allostate" jdbcType="INTEGER" property="allostate"/>
        <result column="parkinggate" jdbcType="VARCHAR" property="parkinggate"/>
        <result column="runnums" jdbcType="INTEGER" property="runnums"/>
        <result column="testtime" jdbcType="VARCHAR" property="testtime"/>
        <result column="userId" jdbcType="VARCHAR" property="userId"/>
        <result column="updateTime" jdbcType="VARCHAR" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, filename, model, flightid, allostate, parkinggate, runnums, testtime, userId,updateTime
    </sql>

    <select id="getResultForAgreementRate" resultMap="BaseResultMap">
        select
        id, filename, model, flightid, allostate, parkinggate, runnums, testtime, userId,date(updateTime)  as updateTime
        from RESULT
        <where>
            <if test="startDate != '' and endDate != '' ">
                ( date(updateTime) BETWEEN #{startDate} and #{endDate} )
            </if>
            <if test="fileName != '' ">
                and filename = #{fileName}
            </if>
            <if test="userId != '' ">
                and userId = #{userId}
            </if>
        </where>
        order by updateTime asc
    </select>

    <update id="updateDataList" parameterType="java.util.List">
        <foreach collection="list" item="updateList" index="index" separator=";">
            update RESULT
            <set>
                filename = "${updateList.filename}",
                model= "${updateList.model}",
                flightId= ${updateList.flightid},
                allostate= ${updateList.allostate},
                parkinggate= "${updateList.parkinggate}",
                userId = "${updateList.userId}",
                updateTime = "${updateList.updateTime}"
            </set>
            where id = ${updateList.id}
        </foreach>

    </update>

    <insert id="insertDataList" parameterType="java.util.List">
        insert into RESULT(filename, model,flightId,allostate,parkinggate,userId,updateTime)
        values
        <foreach collection="list" item="addList" index="index" separator=",">
            (#{addList.filename},
            #{addList.model},
            #{addList.flightid},
            #{addList.allostate},
            #{addList.parkinggate},
            #{addList.userId},
            #{addList.updateTime})
        </foreach>

    </insert>

    <select id="selectBridgeData" resultType="com.bjtu.recovery.entity.vo.BridgeCount">
        select
            date(t1.updateTime) as timePoint,
            count(t2.bridge) as allLines,
            sum(t2.bridge) as bridgeLines,
            t1.model as model
        from RESULT t1
        inner join GATE_INFO t2
        on  t1.parkinggate = t2.parkinggate
        and  date(t1.updateTime) = date(t2.updateTime)
        <where>
            <if test="startDate != '' and endDate != '' ">
                ( date(t1.updateTime) BETWEEN #{startDate} and #{endDate} )
            </if>
            <if test="fileName != '' ">
                and t1.filename = #{fileName}
            </if>
            <if test="userId != '' ">
                and t1.userId = #{userId}
            </if>
        </where>
        group by timePoint,t1.model
        order by timePoint asc
    </select>

    <select id="getUnionResult" resultType="net.sf.json.JSONObject">
        SELECT
        t1.id,
        t2.filename,
        t2.model,
        t2.flightId,
        t2.allostate,
        t2.parkinggate,
        t2.userId,
        t2.updateTime,
        t1.isvip,
        t1.business,
        t1.paras,
        t1.atime,
        t1.dtime,
        t1.nation,
        t1.mdl,
        t1.planenum,
        t1.aflightnum,
        t1.dflightnum,
        t1.origin,
        t1.airportname,
        t1.destination,
        concat(t1.aflightnum,'/',t1.dflightnum) as flightnum ,
        concat(t1.origin,'-',t1.airportname,'-',t1.destination) as flightline
        FROM RESULT t2,FLIGHT_INFO t1
        <where>
            t1.id = t2.flightId
            <if test="filename != '' and filename != null ">
                AND t2.filename = #{filename}
            </if>
            <if test="userId != '' and userId != null">
                AND t2.userId = #{userId}
            </if>

            <if test="model != '' and model != null ">
                AND t2.model = #{model}
            </if>
            and t2.updateTime = ( select max(updateTime)
            from RESULT
            WHERE model = t2.model
            and filename=t2.filename
            and userId = t2.userId
            and flightId=t2.flightId
            )
        </where>
    </select>

</mapper>
